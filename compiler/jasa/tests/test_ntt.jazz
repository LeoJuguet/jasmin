/* safety annotations */

abstract predicate bool init_array(int,int,int); /* #parameter, offset, len */
abstract predicate bool assigns_array(int,int,int); /* #result, offset, len */

/* require "params.jinc" */

param int KYBER_Q = 3329;
param int KYBER_N = 256;
param int KYBER_K = 3;
param int KYBER_VECN =  KYBER_K * KYBER_N;

param int KYBER_SYMBYTES = 32;
param int KYBER_ETA = 2;
param int KYBER_POLYBYTES = 384;
param int KYBER_POLYVECBYTES = (KYBER_K * KYBER_POLYBYTES);
param int KYBER_POLYCOMPRESSEDBYTES = 128;
param int KYBER_POLYVECCOMPRESSEDBYTES = (KYBER_K * 320);
param int KYBER_MSGBYTES = KYBER_SYMBYTES;
param int KYBER_CT_LEN = KYBER_POLYVECCOMPRESSEDBYTES + KYBER_POLYCOMPRESSEDBYTES;
param int KYBER_INDCPA_PUBLICKEYBYTES = KYBER_POLYVECBYTES + KYBER_SYMBYTES;
param int KYBER_PUBLICKEYBYTES = KYBER_INDCPA_PUBLICKEYBYTES;
param int KYBER_SSBYTES = 32;

/* require "reduce.jinc" */

param int QINV    = 62209;     /* q^(-1) mod 2^16 */
param int MONT    = 2285;      /* 2^16 % Q */
param int BARR    = 20159;     /* (1U << 26)/KYBER_Q + 1 */


inline fn __fqmul(reg u16 a b) -> reg u16
{
  reg u32 ad bd c t u;
  reg u16 r;

  ad = (32s) a;
  bd = (32s) b;
  c = ad * bd;

  u = c * (QINV << 16); // merge multiplication of u (<<16)
  u >>s= 16;

  t = u * -KYBER_Q; // replace sub by add
  t += c;
  t >>s= 16;
  r = t;

  return r;
}

inline
fn __barrett_reduce(reg u16 a) -> reg u16
{
  reg u32 t;
  reg u16 r;
  t = (32s)a;
  t = t * BARR;
  //t = #SAR_32(t, 26);
  t >>s= 26;
  t *= KYBER_Q;
  r = t;
  r = a;
  r -= t;
  return r;
}

/* require "zetas.jinc" */

u16[128] jzetas = {2285, 2571, 2970, 1812, 1493, 1422, 287, 202, 3158, 622, 1577, 182, 962, 2127, 1855, 1468, 
                  573, 2004, 264, 383, 2500, 1458, 1727, 3199, 2648, 1017, 732, 608, 1787, 411, 3124, 1758, 
                  1223, 652, 2777, 1015, 2036, 1491, 3047, 1785, 516, 3321, 3009, 2663, 1711, 2167, 126, 1469, 
                  2476, 3239, 3058, 830, 107, 1908, 3082, 2378, 2931, 961, 1821, 2604, 448, 2264, 677, 2054, 
                  2226, 430, 555, 843, 2078, 871, 1550, 105, 422, 587, 177, 3094, 3038, 2869, 1574, 1653, 
                  3083, 778, 1159, 3182, 2552, 1483, 2727, 1119, 1739, 644, 2457, 349, 418, 329, 3173, 3254, 
                  817, 1097, 603, 610, 1322, 2044, 1864, 384, 2114, 3193, 1218, 1994, 2455, 220, 2142, 1670, 
                  2144, 1799, 2051, 794, 1819, 2475, 2459, 478, 3221, 3021, 996, 991, 958, 1869, 1522, 1628};


u16[128] jzetas_inv = {1701, 1807, 1460, 2371, 2338, 2333, 308, 108, 2851, 870, 854, 1510, 2535, 1278, 1530, 1185, 
                       1659, 1187, 3109, 874, 1335, 2111, 136, 1215, 2945, 1465, 1285, 2007, 2719, 2726, 2232, 2512, 
                       75, 156, 3000, 2911, 2980, 872, 2685, 1590, 2210, 602, 1846, 777, 147, 2170, 2551, 246, 
                       1676, 1755, 460, 291, 235, 3152, 2742, 2907, 3224, 1779, 2458, 1251, 2486, 2774, 2899, 1103, 
                       1275, 2652, 1065, 2881, 725, 1508, 2368, 398, 951, 247, 1421, 3222, 2499, 271, 90, 853, 
                       1860, 3203, 1162, 1618, 666, 320, 8, 2813, 1544, 282, 1838, 1293, 2314, 552, 2677, 2106, 
                       1571, 205, 2918, 1542, 2721, 2597, 2312, 681, 130, 1602, 1871, 829, 2946, 3065, 1325, 2756, 
                       1861, 1474, 1202, 2367, 3147, 1752, 2707, 171, 3127, 3042, 1907, 1836, 1517, 359, 758, 1441};



inline
fn __poly_reduce(reg ptr u16[KYBER_N] rp) -> reg ptr u16[KYBER_N]
requires {init_array(0,0,KYBER_N)}
ensures {assigns_array(0,0,KYBER_N)}
{
  reg u64 j; 
  reg u16 t;
  j = 0;
  while (j < KYBER_N) 
  {
    t = rp[(int)j];
    t = __barrett_reduce(t);
    rp[(int)j] = t;
    j += 1;
  }
  return rp;
}





param int DMONT   = 1353;      /* (1ULL << 32) % KYBER_Q */






fn _poly_ntt(reg ptr u16[KYBER_N] rp, reg ptr u16[128] zetasp) -> reg ptr u16[KYBER_N]
requires {init_array(0,0,KYBER_N) && init_array(1,0,128*16)}
ensures {assigns_array(0,0,KYBER_N)}
{
  reg u64 len;  
  reg u64 start;
  reg u64 j;
  reg u64 cmp;
  reg u64 offset;
  
  reg u16 zeta;
  reg u16 t;
  reg u16 s;
  reg u16 m;

  //reg ptr u16[128] zetasp;
  reg u64 zetasctr;

  //zetasp = jzetas;
  zetasctr = 0;
  len = 128;
  while (len >= 2)
  {
    start = 0;
    while (start < 256)
    {
      zetasctr += 1;
      zeta = zetasp[(int)zetasctr];
      j = start;
      cmp = start + len;
      while (j < cmp)
      {
        offset = j + len;
        t = rp[(int)offset];
        t = __fqmul(t, zeta);
        s = rp[(int)j];
        m = s;
        m -= t;
        rp[(int)offset] = m;
        t += s;
        rp[(int)j] = t;
        j += 1;
      }
      start = j + len;
    }
    len >>= 1;
  }

  rp = __poly_reduce(rp);

  return rp;
}

