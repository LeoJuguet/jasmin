abstract predicate bool init_array(int,int,int); /* #parameter, offset, len */
abstract predicate bool assigns_array(int,int,int); /* #result, offset, len */


param int KYBER_N = 256;

fn _poly_sub(reg ptr u16[KYBER_N] rp ap bp) -> reg ptr u16[KYBER_N]
requires {init_array(1,0,KYBER_N) && init_array(2,0,KYBER_N)}
ensures {assigns_array(0,0,KYBER_N)}
{
  reg u16 a;
  reg u16 b;
  reg u16 r;
  reg u64 i;

  i = 0;
  while (i < KYBER_N) {
    a = ap[(int)i];
    b = bp[(int)i];
    r = a - b;
    rp[(int)i] = r;
    i += 1;
  }
  return rp;
}

